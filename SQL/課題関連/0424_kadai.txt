・SQLコーディング規約について

名が体を表す具体的な名前を付けましょう。
間違っても「A」とか「idx_1」とか「WORK」のような無意味な記号を使ってはいけません。
小数データを扱うときは、実際に必要な桁数よりも多めに取っておいた方がいいでしょう。

SQL は段階的な実行デバッグがほとんどできないので、
複雑な SQL にはコメントをこれでもかと書いておくべきです。

プロの SE やプログラマがインデントを付けないコーディングをするのは、
役立たずどころか公害もいいところです。自分のソースをメンテナンスする人間のことを
気遣えない人間に、チームプレイの仕事をしてほしくありません。
サブクエリについてインデントを下げます。

カンマは要素と要素の中間に置く 。

ソースには適度な隙間が必要です。あんまりきつきつに詰めてしまうと、
意味的な単位が不明確になり、解読する側の余計な労力も増えます。

予約語は大文字、列名やテーブル名は小文字（要素語の頭文字だけは大文字を使う流派もある[2]）、
ということになっています。

DECODE（Oracle）、IF（MySQL）、 NVL（Oracle）等のベンダ独自拡張の関数を使ってはいけません。CASE式や COALESCE 関数を使いましょう。
外部結合は「LEFT OUTER JOIN」、「RIGHT OUTER JOIN」、「FULL OUTER JOIN」を使って書きましょう。(+)演算子（Oracle）、*=演算子（SQLServer）は避けましょう。
否定演算子は、!= ではなく、<> を使いましょう。


・to_date/to_char関数の解説
TO_CHAR（日付データ,　日付書式）	数値や日時を文字列へ変換するSQL関数である。

TO_DATE(文字列,　日付書式)	文字列で表された日付をDATEデータ型に変換するSQL関数です。


・サブクエリの使い方
サブクエリは「副問い合わせ」とも呼ばれ、
SQL文の中にSELECT文を埋め込み、抽出条件として利用することを可能としています。

サブクエリとしてSELECT文を記述する際、単一の結果を返すSELECT文と
複数行にわたる結果を返すSELECT文が存在します。
単一の結果であれば、先ほど取り上げたようなイコール、大小といった条件式を利用できます。
しかし、サブクエリの結果が複数行となる場合はこのような条件式は利用できず、
「条件のいずれかと一致する」を意味する「IN」句を利用する必要があります。
https://goo.gl/74HgpQ

WHERE句でサブクエリを利用する場合、サブクエリの結果を取得することはできず、
WHERE句にて条件式として利用するだけでした。
一方、SELECT句でサブクエリを利用する場合、メインクエリの結果として
サブクエリの結果を取得できます。

SELECT句で利用するサブクエリでは、
メインクエリから列値を渡すことによって、関数のような動きをさせることが可能です。

FROM句での利用では、サブクエリの結果を1つのテーブルとして扱うことが可能となります。
FROM句でのサブクエリの利用は非常に応用性が高く、
サブクエリの主だった利用目的はこのFROM句での利用にあるといえるほどです。
サブクエリをFROM句にて指定することで結果をあたかも1つのテーブルとして扱うことが可能であり、
多様な表現を簡単に行うことができます。



・PLSQLの説明と次の演習問題。
PL/SQLは米オラクルが開発した、「SQL（Structured Query Language：非手続き型言語）」
を“手続き型”言語として拡張したプログラミング言語です。
Oracle Databaseにおいて、さまざまな手続き処理を行うために用います。

PL/SQLでは例えば、「表から取り出したデータを基に、レコードを更新するかどうかを判断する」
「あるSQLを、指定した回数で繰り返し実行する」など、SQL単体では行えない一連の処理（手続き処理）
を実行できます。
