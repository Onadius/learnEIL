/*****************************************************************************/
/* af033k.pc :                                                               */
/*                                                                           */
/* Notes-.        在庫報告ﾃﾞｰﾀ取込Prog                                       */
/*    Usage : af033k user/pass[@xxx] -f<file>                                */
/*                                                                           */
/*    EXIT-> 0 : 正常 (ERRなし)                                              */
/*           1 : Fatal Error                                                 */
/*           2 : DB Error                                                    */
/*           5 : Usage                                                       */
/*                                                                           */
/* History-.              2001/06/14   :   Created by T.Shirasaki(SE-No.229) */
/*                                                                           */
/*****************************************************************************/

#include "af033k.h"

/* using ERROR CORD */
EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR  Dats[15];
  VARCHAR  IDat[15];

  /* For INSERT */
  double   Obat;
  VARCHAR  rcvdst[4];
  VARCHAR  custcd[13];
  VARCHAR  cencd[7];
  VARCHAR  vjan[13+1];
  VARCHAR  ojan[14];
  VARCHAR  cugdcd[16];
  int      cno;
  short    ind_cno;
  int      pno;
  short    ind_pno;
  int      pno9;
  short    ind_pno9;
  int      jpno;
  short    ind_jpno;
  int      zpno;
  short    ind_zpno;
  int      npno;
  short    ind_npno;
EXEC SQL END   DECLARE SECTION;

static char Inf1[4001];
static char Inf2[512];
SYS  sys;



/*-----------------------------------------------------------------------------
name   = Initiate()
func   = 初期化
io     = argc         :  i  int
         argv         :  i  char**
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      Initiate(int argc, char* argv[])
{
int      i;

  InitLog(LOG_NAME, APP_NAME, DEF_LOGSIZE);
  SetLogHead(0);
  SetLogBody(LOG_DSP, 0, "_/_/_/ %s(%s) 起動", APP_JNAME, APP_NAME);

  ClearSys();
  InitDataQue( &(sys.Data) );
  SetSysInterval( 60 );
  SetSysLogin( 0 );
  SetSysLock( 0 );
  SetSysExitCode( EXT_NORM );
  sys.Mode = MODE_RDTXT;

  if ( GetArgument(argc, argv) ) {
    SetSysExitCode( EXT_USAGE );

    /* func: ?
    PrintUsage();
    */

    return( STS_ERR );
  }

  return( STS_LOGIN );
}


/*-----------------------------------------------------------------------------
name   = GetArgument()
func   = 初期化処理
io     =
return = 0            :  normal
         -1           :  abnormal
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      GetArgument(int argc, char* argv[])
{
int      i, Len;
char     BatStr[11];

  if ( argc < 2 ) {
    SetLogHead(0);
    SetLogBody(LOG_DSP, 0, "引数が足りません");
    return( -1 );
  }

  for ( i = 0; i < argc; i++ ) {
    if ( (*(argv[i]) == '-') || (*(argv[i]) == '/') ) {
      switch( toupper(*(argv[i] + 1)) ) {
       case 'F' :  /* ﾌｧｲﾙ名指定 */
        if ( strlen(argv[i]) > 2 ) {
          Len = strlen(argv[i]) - 2;
          SetSysFileName(argv[i] + 2, Len);

          /* ファイル名よりフォ−マット種別を取得 */
          if ( SetDftype(sys.Dftype, sys.FileName) ) {
            return( 1 );
          }
        }
        break;
       default  :
        ;
      }
    }
    else {
      SetSysUserPass( argv[i] );
    }
  }

  memset(Inf2, 0, 512);
  sprintf(Inf2, "af033k %s -f%s", GetSysUserPass(), GetSysFileName());

  if ( !strlen(GetSysUserPass()) || !strlen(GetSysFileName()) ) {
    return( FATALERROR );
  }

  return( NORMAL );
}


/*--------------------------------------------------------
name   = SetDftype()
func   = ファイル名よりフォ−マット種別を取得
io     = Dftype      : -o : フォ−マット種別格納先
         FileName    : i- : 取込み対象ファイル名(起動時に指定)
return = 0           : normal
         1           : unknown format
date   = 2002/06/18  Written by T.Shirasaki(SE-No.229)
---------------------------------------------------------*/
int      SetDftype(char *Dftype, char *FileName)
{
char    *cp, *ext;

  ext = NULL;
  for ( cp = FileName; *cp != '\0'; cp++ ) {
    if ( *cp == '.' ) {
      ext = cp + 1;
    }
  }
  if ( ext == (char *)NULL ) {
    SetLogHead( 0 );
    SetLogBody(1, 0, "Unkown format[%s]", FileName);
    return( 1 );
  }

  StrnCpy(Dftype, ext, 3);
  ToUppers( Dftype );

  SetLogHead( 0 );
  SetLogBody(1, 0, "Data format is \"%s\"(%s)", Dftype, FileName);

  return( 0 );
}



/*-----------------------------------------------------------------------------
name   = PrintUsage()
func   =
io     =
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)


void     PrintUsage()
{
char PID[9], pid[9];
char *p;
int  i;

  for(strcpy(PID,APP_NAME), i=0;  i < strlen(PID); pid[i]=tolower(PID[i]),i++ );
  SetLogHead(0);
  SetLogBody(LOG_DSP, 0, "<usage> %s user/pass[@xxx] -f<FILENAME>", pid );
  return;
}
-----------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------
name   = InitDataQue()
func   =
io     =
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      InitDataQue(TAB_DATA* Prim)
{
  memset(Prim, 0, sizeof(TAB_DATA));

  Prim->Prev = Prim;
  Prim->Next = Prim;

  return( 0 );
}



/*-----------------------------------------------------------------------------
name   = AddDataQue()
func   =
io     =
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      AddDataQue(TAB_DATA* Prim, TAB_DATA* AddElem)
{
TAB_DATA *NewElem;
TAB_DATA *PrevElem;

  if ( (NewElem = (TAB_DATA*)malloc(sizeof(TAB_DATA))) == (TAB_DATA*)NULL ) {
    return( -1 );
  }

  memset(NewElem, 0,       sizeof(TAB_DATA));
  memcpy(NewElem, AddElem, sizeof(TAB_DATA));

  /* 連結 */
  PrevElem       = Prim->Prev;
  NewElem->Next  = Prim;
  NewElem->Prev  = PrevElem;
  PrevElem->Next = NewElem;
  Prim->Prev     = NewElem;

  return( 0 );
}



/*-----------------------------------------------------------------------------
name   = WaitAndRollback()
func   = login再試行
io     =
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      WaitAndRollback()
{
  SetAFS73("再起動中", "", sys.FileName);

  FreeDataQue( &(sys.Data) ); /* func:???ｽ???の領域を解放 */
  DExclusive(); /* func:排他解除 */

  if ( GetSysLogin() ) {
    SetSysLogin( 0 );
    EXEC SQL ROLLBACK WORK RELEASE;
  }
  SetLogHead(0);
  SetLogBody(LOG_DSP, 0, "おやすみ....(%d???)", GetSysInterval());
  Ssleep( GetSysInterval() );

  return( STS_LOGIN );
}


/*****   リスト関連   *****/

/*-----------------------------------------------------------------------------
name   = SetDBLog
func   = AFS73に記録
io     = Usr_Pwd      : i- DB接続文字列 [usr/pass@dbname 形式であること]
         pid          : i- ﾌﾟﾛｸﾞﾗﾑID
         pnm          : i- ﾌﾟﾛｸﾞﾗﾑ名
         dats         : io 処理開始時刻 (指定なしなら 現在時刻をｾｯﾄ)
         inf1         : i-
         inf2         : i-
         OBat         : i- 処理ﾊﾞｯﾁNo.
return = 0            : normal
         <>0          : DB error (ORACLE Error Code)
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
static int  SetDBLog(char* Usr_Pwd, char* pid, char* pnm, char* inf1, char* inf2,
                     double OBat, int Count, char* Vend, char* Cucd, char* Dat, int idx)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR  ComUser[64];
  VARCHAR  DbName[32];
  VARCHAR  WSID[6];
  VARCHAR  PID[9];
  VARCHAR  PNM[25];
  VARCHAR  INF1[512];
  VARCHAR  INF2[512];
  double   OBAT;
  long     N1;
  VARCHAR  C1[6];
  VARCHAR  C2[8];
  VARCHAR  D1[9];
  double   Idx;
EXEC SQL END   DECLARE SECTION;
char     wsid[16];

  EXEC SQL DECLARE LogDB DATABASE;

  EXEC SQL WHENEVER SQLERROR CONTINUE;

  SeparateDbName(Usr_Pwd, (char *)ComUser.arr, (char *)DbName.arr);
  ComUser.len = strlen((char *)ComUser.arr);
  DbName.len  = strlen((char *)DbName.arr);

  EXEC SQL CONNECT :ComUser AT LogDB USING :DbName;
  if ( V_SQLCODE ) {
    return( V_SQLCODE );
  }

  memset(wsid, 0, sizeof(wsid));
#ifdef __USE_WSID__
  GetHostName( wsid );
#else
  strcpy(wsid, "ONLNE");
#endif
  OBAT = OBat;
  VarcharCpy(WSID, wsid, strlen(wsid));
  VarcharCpy(PID,  pid,  strlen(pid) );
  VarcharCpy(PNM,  pnm,  strlen(pnm) );
  VarcharCpy(INF1, inf1, strlen(inf1));
  VarcharCpy(INF2, inf2, strlen(inf2));
  N1   = Count;
  VarcharCpy(C1,   Vend, strlen(Vend));
  VarcharCpy(C2,   Cucd, strlen(Cucd));
  VarcharCpy(D1,   Dat,  strlen(Dat) );

  EXEC SQL AT LogDB
    UPDATE AFS73 SET DATT=SYSDATE, BAT=:OBAT,  N1=:N1,
                     INF1=:INF1,   INF2=:INF2,
                     D1=TO_DATE(:D1,'YYYYMMDD')
     WHERE WSID||''=:WSID AND PID||''=:PID AND (BAT+0=:OBAT or BAT+0=0)
       AND DATS=TO_DATE(:Dats,'YYYYMMDDHH24MISS');
  if ( V_SQLCODE == NOTFOUND ) {
    VarcharInit( Dats );
    EXEC SQL AT LogDB
      INSERT INTO AFS73(WSID, PID, PNM, BAT, DATS, N1, D1, INF1, INF2)
      VALUES(:WSID, :PID, :PNM, :OBAT, SYSDATE, :N1, TO_DATE(:D1,'YYYYMMDD'), :INF1, :INF2)
      RETURNING TO_CHAR(DATS,'YYYYMMDDHH24MISS') INTO :Dats;
    VarcharNullAdd( Dats );
  }
  if ( V_SQLCODE ) {
    EXEC SQL AT LogDB ROLLBACK WORK RELEASE;
    return( V_SQLCODE );
  }

  EXEC SQL AT LogDB COMMIT WORK RELEASE;
  if ( V_SQLCODE ) {
    EXEC SQL AT LogDB ROLLBACK WORK RELEASE;
    return( V_SQLCODE );
  }

  return( 0 );
}

/*-----------------------------------------------------------------------------
name   = SetAFS73()
func   =
io     =
return = 0            :  normal
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      SetAFS73(char* status, char* Message, char* FileName)
{
TAB_DATA *Elem;
TAB_DATA *Prim = &(sys.Data);
int       i, Count = 0;

  SetLogHead( 0 );
  SetLogBody(1, 0, "%s[%s]", status, Message);

  memset(Inf1, 0, sizeof(Inf1));
  printf("SetAFSのやつだよ\n");

  if ( SetDBLog(sys.UserPass, APP_NAME, APP_JNAME, Inf1, Inf2,
                sys.OBat, sys.Count, sys.Vend, "", sys.Sdday, 0) ) {
    SetLogHead( V_SQLCODE );
    SetLogBody(1, 0, "ログ書込み失敗[%s]", Inf1);
  }

  return( 0 );
}

/*-----------------------------------------------------------------------------
name   = DelAFS73()
func   =
io     =
return = 0            :  normal
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      DelAFS73( void )
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR  PID[9];
  double   OBAT;
  VARCHAR  C1[6];
  VARCHAR  D1[9];
EXEC SQL END   DECLARE SECTION;

  SetLogHead( 0 );
  SetLogBody(0, 0, "Delete AFS73[%s]", sys.Dats);

  VarcharCpy(PID, APP_NAME,  strlen(APP_NAME) );
  OBAT = sys.OBat;
  VarcharCpy(C1,  sys.Vend,  strlen(sys.Vend) );
  VarcharCpy(D1,  sys.Sdday, strlen(sys.Sdday));

  EXEC SQL DELETE AFS73
            WHERE PID=:PID AND BAT+0=:OBAT
              AND D1=TO_DATE(:D1,'YYYYMMDD') AND (C1=:C1 OR (C1 IS NULL)) AND C2 IS NULL;
  if ( V_SQLCODE ) {
    SetLogHead( V_SQLCODE );
    SetLogBody(1, 0, "ログ消去失敗[%s:%s:%s]", sys.Vend, sys.Cucd, sys.Sdday);
  }

  EXEC SQL COMMIT WORK;
  if ( V_SQLCODE ) {
    SetLogHead( V_SQLCODE );
    SetLogBody(1, 0, "ログ消去失敗[(Del AFS73 commit)");
    return( DBERROR );
  }

  return( 0 );
}


/*-----------------------------------------------------------------------------
name   = DeleteDataQue()
func   = ﾘｽﾄの領域を解放
io     =
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      DeleteDataQue(TAB_DATA* DeleteElem)
{
TAB_DATA *PrevElem;
TAB_DATA *NextElem;

  PrevElem = DeleteElem->Prev;
  NextElem = DeleteElem->Next;

  PrevElem->Next = NextElem;
  NextElem->Prev = PrevElem;

  free( DeleteElem );

  return( 0 );
}


/*-----------------------------------------------------------------------------
name   = FreeDataQue()
func   = 領域を解放
io     =
return =
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      FreeDataQue(TAB_DATA* Prim)
{
TAB_DATA *DeleteElem;

  for ( DeleteElem = Prim->Next; DeleteElem != Prim; DeleteElem = Prim->Next ) {
    DeleteDataQue( DeleteElem );
  }

  return( 0 );
}


/*--------------------------------------------------------
name   = 排他解除
func   =
io     =
return =
date   = 2001/06/14   Written by K.Sasaki(SE-151)
---------------------------------------------------------*/
int     DExclusive(void)
{
EXEC SQL BEGIN DECLARE SECTION;
  int      Status;
EXEC SQL END   DECLARE SECTION;

  EXEC SQL EXECUTE
    BEGIN
      :Status := dbms_lock.release( 26 );
    END;
  END-EXEC;

  SetSysLock( 0 );

  return( STS_END );
}


/*-----------------------------------------------------------------------------
name   = LoginToOracle()
func   =
io     =
return = 次ｽﾃｰﾀｽ
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      LoginToOracle()
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR usr_pwd[80];
  VARCHAR sdday[8];
EXEC SQL END   DECLARE SECTION;

  VarcharCpy(usr_pwd, GetSysUserPass(), strlen(GetSysUserPass()));

  EXEC SQL WHENEVER SQLERROR CONTINUE;
  EXEC SQL CONNECT :usr_pwd ;
  if ( V_SQLCODE < 0 ) {
    SetLogHead(V_SQLCODE);
    SetLogBody(LOG_DSP, 0,
               "ORACLEへのLoginに失敗しました。(%s)", GetSysUserPass());
    SetSysLogin( 0 );
    return( STS_WAIT );
  }
  SetLogHead(0);
  SetLogBody(LOG_DSP, 0, "ORACLEへLoginしました。(%s)", GetSysUserPass());
  SetSysLogin( 1 );

  EXEC SQL
    SELECT TO_CHAR(SDDAY,'YYYYMMDD')
      INTO :sdday
      FROM AXM99
     WHERE ID='1';
  if ( V_SQLCODE ) {
    SetLogHead(V_SQLCODE);
    SetLogBody(LOG_DSP, 0, "制御ﾃﾞｰﾀ取得失敗", GetSysUserPass());
    return( STS_WAIT );
  }

  if ( sys.OBat == (double)0.0 ) {
    if ( GetOBat(&(sys.OBat)) ) {
      SetAFS73("ﾃﾞｰﾀ取込ｴﾗｰ", "ﾊﾞｯﾁ番号取得に失敗しました", sys.FileName);
      return( STS_WAIT );
    }
    SetLogHead(0);
    SetLogBody(1, 0, "OBAT=%.0f", sys.OBat);
  }

  VarcharToStr(sys.Sdday, sdday);
  SetLogHead( 0 );
  SetLogBody(0, 0, "業務日付[%s]", sys.Sdday);

  SetAFS73("開始", "", sys.FileName);

  return( STS_EXCL );
}



/*--------------------------------------------------------
name   = 二重走行チェック
func   =
io     =
return = 次ｽﾃｰﾀｽ
date   = 2001/06/14   Written by K.Sasaki(SE-151)
---------------------------------------------------------*/
int     Exclusive(void)
{
int     ret,i;

  for( i=0; ((ret = LockProcess()) == 1) && i<120; i++ ) {
    SetLogHead(0);
    SetLogBody(1, 0, "%s 起動中 (%d秒 Wait)", APP_NAME, GetSysInterval());
    Ssleep( GetSysInterval() );
  }

  if ( ret < 0 || i==120 ) {
    SetLogHead(0);
    SetLogBody(1, 0, "Lock 失敗");
    return( STS_WAIT );
  }

  SetSysLock( 1 );

  return( STS_READ );
}


/*-----------------------------------------------------------------------------
name   = LockProcess()
func   =
io     = none
return = 0            : Lock OK
         1            : Lock Fail
         -1           : Error
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      LockProcess( void )
{
EXEC SQL BEGIN DECLARE SECTION;
  int      Status;
EXEC SQL END   DECLARE SECTION;

  EXEC SQL WHENEVER SQLERROR CONTINUE;
  EXEC SQL EXECUTE
  BEGIN
    :Status := DBMS_Lock.Request(26, 6, 1, FALSE);
  END;
  END-EXEC;
  if ( V_SQLCODE ) {
    SetLogHead(V_SQLCODE);
    SetLogBody(1, 0, "LOCK ERROR (%d)", V_SQLCODE);
    return( -1 );
  }
  switch ( Status )  {
    case 0:
    case 1:
      break;
    default:
      return( -1 );
  }

  return( Status );
}




/*-----------------------------------------------------------------------------
name   = ReadData()
func   =
io     =
return = 次ｽﾃｰﾀｽ
date   = 2001/06/14   Written by K.Sasaki(SE-151)
-----------------------------------------------------------------------------*/
int      ReadData()
{
int      RetValue = STS_CHECK;
int      ret;
char     Message[256];

  SetAFS73("ﾃﾞｰﾀ読込中", "", sys.FileName);

  if ( sys.Mode & MODE_RDTXT ) {

    /* readtxt.cより */
    switch( (ret=GetDataFromText(sys.FileName, &(sys.Data))) ) {
     case -9 :  /* ﾌｧｲﾙなし */
      RetValue = STS_DEXCL;
      sprintf(Message,"ﾃﾞｰﾀﾌｧｲﾙがありません　(在庫報告)　[%s]\r\n<%s>", sys.Dftype, sys.FileName);
      SetSysExitCode( EXT_FERR );
      SetAFS73("ﾃﾞｰﾀ読込不可", "ﾃﾞｰﾀﾌｧｲﾙがありません", sys.FileName);
      break;

     case -2 :  /* その他   */
      RetValue = STS_DEXCL;
      sprintf(Message,"ﾃﾞｰﾀﾌｧｲﾙの読込に失敗しました　(在庫報告)　[%s]\r\n<%s>", sys.Dftype, sys.FileName);
      SetSysExitCode( EXT_FERR );
      SetAFS73("ﾃﾞｰﾀ読込ｴﾗｰ", "ﾃﾞｰﾀﾌｧｲﾙの読込に失敗しました", sys.FileName);
      break;

     case -1 :  /* ｻｲｽﾞ不正 */
      RetValue = STS_DEXCL;
      sprintf(Message,"ﾌｫｰﾏｯﾄが不正です　(在庫報告)　[%s]\r\n<%s>", sys.Dftype, sys.FileName);
      SetSysExitCode( EXT_FERR );
      SetAFS73("ﾃﾞｰﾀ読込ｴﾗｰ", "ﾌｫｰﾏｯﾄが不正です", sys.FileName);
      break;

     case  0 :  /* ﾃﾞｰﾀ 0件 */
      RetValue = STS_DEXCL;
      SetSysExitCode( EXT_NODAT );
      break;

     default :  /* 正常 */
      SetAFS73("ﾃﾞｰﾀ読込終了", "", sys.FileName);
      /* RetValue = STS_INSERT; */
      RetValue = STS_DEXCL ;
    }
  }
  else { /* workより取込み */
    ;
  }
  if( ret < 0 ){
    ConsoleTimerMessage(Message, 0, 4);
  }
  return( RetValue );
}




/*-----------------------------------------------------------------------------
name   = Terminate()
func   = 終了処理
io     =
return = 0            :  normal
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
int      Terminate()
{
char     Message[256];
char     HostName[20];
int      Prio = 2;

  EXEC SQL WHENEVER SQLERROR CONTINUE;

  if ( GetSysLogin() ) {
    memset(Message, 0, sizeof(Message));
    switch( GetSysExitCode() ) {
     case EXT_NORM  :
#ifndef __DEBUG__
      BackupFile();
#endif
      SetAFS73("正常終了", "", sys.FileName);
      sprintf(Message, "%s[%s:%s様]　%ld件正常終了", APP_JNAME, sys.Dftype, sys.Cunm, sys.Count);
      SetOnlineMon(sys.UserPass, sys.Dtcls, sys.Dftype, sys.FileName, 0, sys.Count);
      break;

     case EXT_NODAT :
      BackupFile();
      SetAFS73("○終了○", "ﾃﾞｰﾀがありません", sys.FileName);
      sprintf(Message,
        "%s[%s:%s]　終了\nデータがありません", APP_JNAME, sys.Dftype, sys.Cunm);
      Prio = 3;
      SetOnlineMon(sys.UserPass, sys.Dtcls, sys.Dftype, sys.FileName, 1, sys.Count);
      break;

     case EXT_USAGE :
     case EXT_FERR  :
     case EXT_DBERR :
     default        :
      sprintf(Message,
        "◇◆%s[%s:%s]に失敗しました。◆◇\n◇◆　　再実行して下さい。　　◆◇", APP_JNAME, sys.Dftype, sys.Cunm);
      Prio = 4;
      SetOnlineMon(sys.UserPass, sys.Dtcls, sys.Dftype, sys.FileName, 1, sys.Count);
    }
    ResponseTerminateMessage(Message, "CNSL", 0, Prio);

    EXEC SQL ROLLBACK WORK RELEASE;
  }

  /* ﾘｽﾄ領域解放 */
  FreeDataQue( &(sys.Data) );

  return( NORMAL );
}


/*-----------------------------------------------------------------------------
name   = SetOnlineMon
func   = AFS73に記録
io     = Usr_Pwd      : i- DB接続文字列 [usr/pass@dbname 形式であること]
         inf1         : i-
         inf2         : i-
         OBat         : i- 処理ﾊﾞｯﾁNo.
return = 0            : normal
         <>0          : DB error (ORACLE Error Code)
date   = 2010/03/15   Written by T.Shirasaki(SE No. 229)
-----------------------------------------------------------------------------*/
static int  SetOnlineMon(char* Usr_Pwd, char* Dtcls, char* Dftype, char* FileName, int Mode, int Reccnt)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR  ComUser[64];
  VARCHAR  DbName[32];
  VARCHAR  DTCLS[2+1];
  VARCHAR  DFTYPE[6];
  VARCHAR  DFILE[128];
  int      ESTS;
  int      RECCNT;
EXEC SQL END   DECLARE SECTION;

  EXEC SQL DECLARE MonDB DATABASE;

  EXEC SQL WHENEVER SQLERROR CONTINUE;

  SeparateDbName(Usr_Pwd, (char *)ComUser.arr, (char *)DbName.arr);
  ComUser.len = strlen((char *)ComUser.arr);
  DbName.len  = strlen((char *)DbName.arr);

  EXEC SQL CONNECT :ComUser AT MonDB USING :DbName;
  if ( V_SQLCODE ) {
    return( V_SQLCODE );
  }

  VarcharCpy(DTCLS,  Dtcls,  strlen(Dtcls) );
  VarcharCpy(DFTYPE, Dftype, strlen(Dftype));
  VarcharInit( DFILE );
  GetDFile((char*)DFILE.arr, FileName);
  DFILE.len = strlen( (char*)DFILE.arr );
  ESTS = (Mode ? 6 : 0);
  RECCNT = Reccnt;

  SetLogHead( Mode );
  SetLogBody(0, 0, "Online稼動モニタ 変更[%s:%s]", DFTYPE.arr, DFILE.arr);

  EXEC SQL AT MonDB EXECUTE
  BEGIN
    MON_UpdMonitoring(:DTCLS, :DFTYPE, :DFILE, :ESTS, :RECCNT);
  END;
  END-EXEC;
  if ( V_SQLCODE ) {
    SetLogBody(0, 0, "Online稼動モニタ 変更error[%d]", V_SQLCODE);
    EXEC SQL AT MonDB ROLLBACK WORK RELEASE;
    return( 0 );
  }

  EXEC SQL AT MonDB COMMIT WORK RELEASE;
  if ( V_SQLCODE ) {
    EXEC SQL AT MonDB ROLLBACK WORK RELEASE;
    return( 0 );
  }

  return( 0 );
}


/*--------------------------------------------------------
name   = GetDFile()
func   = ファイル名(拡張子なし)取得
io     = DFile       : -o : ファイル名
         FileName    : i- : 取込み対象ファイル名(起動時に指定)
return = 0           : normal
         1           : unknown format
date   = 2004/05/25  Written by T.Shirasaki(SE-No.229)
---------------------------------------------------------*/
int      GetDFile(char *DFile, char *FileName)
{
char    *cp;

  strcpy(DFile, GetBaseName(FileName));
  for ( cp = DFile; *cp != '\0'; cp++ ) {
    if ( *cp == '.' ) {
      *cp = '\0';
    }
  }

  return( 0 );
}


/*--------------------------------------------------------
name   = BackupFile()
func   = バックアップ
io     = local       : i- local file name
         remote      : i- remote file name
return = 0           : normal
         -1          : abnormal
date   = 2002/05/21  Written by T.Shirasaki(SE-No.229)
---------------------------------------------------------*/
int      BackupFile( void )
{
struct stat   buf;
int      i;
char     BaseName[64], BkupFile[256], Command[256];

  strcpy(BaseName, GetBaseName(sys.FileName));

  memset(BkupFile, 0, sizeof(BkupFile));
  strcpy(BkupFile, "/ryutu/online/rback/");
  strcat(BkupFile, BaseName);
  if ( EM_MoveFile(sys.FileName, BkupFile) ) {
    SetLogHead( 0 );
    SetLogBody(1, 0, "Backup Error[%s->%s]", sys.FileName, BkupFile);
    return( -1 );
  }

  SetLogHead( 0 );
  SetLogBody(1, 0, "Backup[%s->%s]", sys.FileName, BkupFile);

  return( 0 );
}


/*-----------------------------------------------------------------------------
date   = 2001/06/14   Written by T.Shirasaki(SE No. 229)

-----------------------------------------------------------------------------*/
int      main(argc, argv)
int      argc;
char    *argv[];
{

  SetSysStatus( Initiate(argc, argv) );

  while( (GetSysStatus() != STS_ERR) && (GetSysStatus() != STS_END) ) {
    switch( GetSysStatus() ) {

     case STS_WAIT   : /* login再試行関数 */
      SetSysStatus( WaitAndRollback() );
      break;

     case STS_LOGIN  : /* oracle login 関数 */
      SetSysStatus( LoginToOracle() );
      break;


      /* -- 二重走行チェック */
     case STS_EXCL   :
      SetSysStatus( Exclusive() );
      break;


     case STS_READ   : /* データ読み込み処理 */
      SetSysStatus( ReadData() );
      break;

      /* インサート処理
     case STS_INSERT :
      SetSysStatus( InsertData(&(sys.Data)) );
      break;
      */


     case STS_DEXCL  :
      SetSysStatus( DExclusive() );
      break;


     default     :
      ;
    }
  }

  Terminate();
  SetLogHead(0);
  SetLogBody(LOG_DSP, 0, "_/_/_/ %s 終了", APP_JNAME);
  exit( GetSysExitCode() );
}
